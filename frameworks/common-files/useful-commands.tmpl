{{if .IsGrpcServer }}
# grpcurl commands for gRPC Server

# Install grpcurl to access grpc services
    go get github.com/fullstorydev/grpcurl/...
    go install github.com/fullstorydev/grpcurl/cmd/grpcurl

# To check the services available
    grpcurl -plaintext localhost:{{.GrpcServerPort}} list

# To check the rpc's available inside a specific service
    grpcurl -plaintext localhost:{{.GrpcServerPort}} list pb.BasicService
    # grpcurl -plaintext localhost:{{.GrpcServerPort}} list serviceName

# To run a method from a service
    grpcurl -plaintext localhost:{{.GrpcServerPort}} pb.BasicService/Create
    # grpcurl -plaintext localhost:{{.GrpcServerPort}} serviceName/MethodName

# To describe any service
    grpcurl -plaintext -msg-template localhost:{{.GrpcServerPort}} describe pb.BasicService
    # grpcurl -plaintext -msg-template localhost:{{.GrpcServerPort}} describe serviceName

# To describe any method
    grpcurl -plaintext -msg-template localhost:{{.GrpcServerPort}} describe pb.BasicService.Get
    # grpcurl -plaintext -msg-template localhost:{{.GrpcServerPort}} describe serviceName.MethodName

# To describe any Message
    grpcurl -plaintext -msg-template localhost:{{.GrpcServerPort}} describe pb.MessageRequest
    # grpcurl -plaintext -msg-template localhost:{{.GrpcServerPort}} describe MessageName
{{end}}

{{if .IsRestServer }}
{{range $i, $v := .RestResources}}
# Curl commands for REST Server resource {{$v.CapsResourceNameSingular}}
{{ if $v.IsRESTCreateAllowed }}
# Post
```
curl -X POST -H "Content-Type: application/json" \
-d '{{$v.ResourcePostBody}}' \
http://localhost:{{$.RestServerPort}}/v1/{{$v.SmallResourceNamePlural}}
```
{{ end }}
{{ if $v.IsRESTListAllowed }}
# Get
```
curl -X GET -H "Content-Type: application/json" \
http://localhost:{{$.RestServerPort}}/v1/{{$v.SmallResourceNamePlural}}
```
{{ end }}
{{ if $v.IsRESTPutAllowed }}
# Put
```
curl -X PUT -H "Content-Type: application/json" \
-d '{{$v.ResourcePutBody}}' \
http://localhost:{{$.RestServerPort}}/v1/{{$v.SmallResourceNamePlural}}/123
```
# Put
### wrong id passed in param
```
curl -X PUT -H "Content-Type: application/json" \
-d '{{$v.ResourcePutBody}}' \
http://localhost:{{$.RestServerPort}}/v1/{{$v.SmallResourceNamePlural}}/1234
```
{{ end }}
{{ if $v.IsRESTGetAllowed }}
# Get  (retrieve specific {{$v.CapsResourceNameSingular}})
```
curl -X GET -H "Content-Type: application/json" \
http://localhost:{{$.RestServerPort}}/v1/{{$v.SmallResourceNamePlural}}/123
```
{{ end }}
{{ if $v.IsRESTDeleteAllowed }}
# Delete
```
curl -X DELETE -H "Content-Type: application/json" \
http://localhost:{{$.RestServerPort}}/v1/{{$v.SmallResourceNamePlural}}/123
```
{{ end }}
{{ end }}

# Run mysql server in docker on local
```
docker run --detach --name=mysql --env="MYSQL_ROOT_PASSWORD=password" --publish 3306:3306 mysql/mysql-server:latest
```
# when mysql throws error about server connection, fire below commands
#
```
error occurred: Error 1130: Host '172.17.0.1' is not allowed to connect to this MySQL server
```
# More details here - https://stackoverflow.com/a/19101356/3751443
```
docker exec -ti mysql bash
mysql -u root -p ### you will be prompted for password
SELECT host FROM mysql.user WHERE User = 'root';
CREATE USER 'root'@'%' IDENTIFIED BY 'password';
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%';
```

# Run ScyllaDB server in docker on local
```
docker pull scylladb/scylla
docker pull scylladb/scylla
docker run --name scylla-local -p 9042:9042 -d scylladb/scylla
docker exec -it scylla-local nodetool status
docker exec -it scylla-local cqlsh
CREATE KEYSPACE "YOUR KEYSPACE NAME GOES HERE WITHOUT QUOTES" WITH replication = {'class': 'SimpleStrategy', 'replication_factor': 1};
USE "YOUR KEYSPACE NAME GOES HERE WITHOUT QUOTES";
# To describe KEYSPACE
DESC KEYSPACES;
# To describe Tables
DESC TABLES;
```

# Run ScyllaDB Code in local server:
```
SCYLLA_DB_HOST=127.0.0.1 SCYLLA_KEYSPACE="YOUR KEYSPACE NAME GOES HERE WITHOUT QUOTES" go run main.go 
```
{{end}}