package daos

import (
	"errors"
	"{{.GitPlatformURL}}/{{.GitPlatformUserName}}/{{.GitRepositoryName}}/{{.NodeName}}/pkg/rest/server/models"
)

var {{.SmallResourceNamePlural}} = make(map[int64]*models.{{.CapsResourceNameSingular}})

type {{.CapsResourceNameSingular}}Dao struct {
}

func New{{.CapsResourceNameSingular}}Dao() (*{{.CapsResourceNameSingular}}Dao, error) {
	return &{{.CapsResourceNameSingular}}Dao{
	}, nil
}

{{ if .IsRESTCreateAllowed }}
func ({{.SmallResourceNameSingular}}Dao *{{.CapsResourceNameSingular}}Dao) Create{{.CapsResourceNameSingular}}({{.SmallResourceNameSingular}} *models.{{.CapsResourceNameSingular}})  (*models.{{.CapsResourceNameSingular}}, error) {
	{{.SmallResourceNamePlural}}[{{.SmallResourceNameSingular}}.Id] = {{.SmallResourceNameSingular}}

	return {{.SmallResourceNameSingular}}, nil
}
{{ end }}

{{ if .IsRESTListAllowed }}
func ({{.SmallResourceNameSingular}}Dao *{{.CapsResourceNameSingular}}Dao) List{{.CapsResourceNamePlural}}() ([]*models.{{.CapsResourceNameSingular}}, error) {
	v := make([]*models.{{.CapsResourceNameSingular}}, len({{.SmallResourceNamePlural}}))
	for _, value := range {{.SmallResourceNamePlural}} {
		v = append(v, value)
	}

	return v, nil
}
{{ end }}

{{ if .IsRESTGetAllowed }}
func ({{.SmallResourceNameSingular}}Dao *{{.CapsResourceNameSingular}}Dao) Get{{.CapsResourceNameSingular}}(id string) (*models.{{.CapsResourceNameSingular}}, error) {
	if {{.SmallResourceNameSingular}}, ok := {{.SmallResourceNamePlural}}[id]; ok {
		return {{.SmallResourceNameSingular}}, nil
	}

	return &models.{{.CapsResourceNameSingular}}{}, errors.New("{{.SmallResourceNameSingular}} not found")
}
{{ end }}

{{ if .IsRESTPutAllowed }}
func ({{.SmallResourceNameSingular}}Dao *{{.CapsResourceNameSingular}}Dao) Update{{.CapsResourceNameSingular}}(id string, {{.SmallResourceNameSingular}} *models.{{.CapsResourceNameSingular}}) (*models.{{.CapsResourceNameSingular}}, error) {
	if id != {{.SmallResourceNameSingular}}.Id {
		return nil, errors.New("id and payload don't match")
	}
	{{.SmallResourceNamePlural}}[{{.SmallResourceNameSingular}}.Id] = {{.SmallResourceNameSingular}}

	return {{.SmallResourceNameSingular}}, nil
}
{{ end }}

{{ if .IsRESTDeleteAllowed }}
func ({{.SmallResourceNameSingular}}Dao *{{.CapsResourceNameSingular}}Dao) Delete{{.CapsResourceNameSingular}}(id string) error {
	if _, ok := {{.SmallResourceNamePlural}}[id]; ok {
		delete({{.SmallResourceNamePlural}}, id)
		return nil
	}

	return errors.New("{{.SmallResourceNameSingular}} not found")
}
{{ end }}