package daos

import (
	"errors"
    "{{.GitPlatformURL}}/{{.GitPlatformUserName}}/{{.GitRepositoryName}}/{{.NodeName}}/pkg/rest/server/daos/clients/sqls"
	"{{.GitPlatformURL}}/{{.GitPlatformUserName}}/{{.GitRepositoryName}}/{{.NodeName}}/pkg/rest/server/models"
    log "github.com/sirupsen/logrus"
    "gorm.io/gorm"
    "strings"
)

type {{.CapsResourceNameSingular}}Dao struct {
	db *gorm.DB
}

func New{{.CapsResourceNameSingular}}Dao() (*{{.CapsResourceNameSingular}}Dao, error) {
	sqlClient, err := sqls.InitGORMSQLiteDB()
	if err != nil {
		return nil, err
	}
	err = sqlClient.DB.AutoMigrate(models.{{.CapsResourceNameSingular}}{})
    if err != nil {
        return nil, err
    }
	return &{{.CapsResourceNameSingular}}Dao{
		db: sqlClient.DB,
	}, nil
}

{{ if .IsRESTCreateAllowed }}
func ({{.SmallResourceNameSingular}}Dao *{{.CapsResourceNameSingular}}Dao) Create{{.CapsResourceNameSingular}}(m *models.{{.CapsResourceNameSingular}}) (*models.{{.CapsResourceNameSingular}}, error) {
    if err := {{.SmallResourceNameSingular}}Dao.db.Create(&m).Error; err != nil {
        log.Debugf("failed to create {{.SmallResourceNameSingular}}: %v", err)
        return nil, err
    }

    log.Debugf("{{.SmallResourceNameSingular}} created")
    return m, nil
}
{{ end }}

{{ if .IsRESTListAllowed }}
func ({{.SmallResourceNameSingular}}Dao *{{.CapsResourceNameSingular}}Dao) List{{.CapsResourceNamePlural}}() ([]*models.{{.CapsResourceNameSingular}}, error) {
    var {{.SmallResourceNamePlural}} []*models.{{.CapsResourceNameSingular}}

    // TODO populate associations here with your own logic - https://gorm.io/docs/belongs_to.html
    if err := {{.SmallResourceNameSingular}}Dao.db.Find(&{{.SmallResourceNamePlural}}).Error; err != nil {
        log.Debugf("failed to list {{.SmallResourceNamePlural}}: %v", err)
        return nil, err
    }

    log.Debugf("{{.SmallResourceNameSingular}} listed")
    return {{.SmallResourceNamePlural}}, nil
}
{{ end }}

{{ if .IsRESTGetAllowed }}
func ({{.SmallResourceNameSingular}}Dao *{{.CapsResourceNameSingular}}Dao) Get{{.CapsResourceNameSingular}}(id string) (*models.{{.CapsResourceNameSingular}}, error) {
    var m *models.{{.CapsResourceNameSingular}}
    if err := {{.SmallResourceNameSingular}}Dao.db.Where("id = ?", id).First(&m).Error; err != nil {
        log.Debugf("failed to get {{.SmallResourceNameSingular}}: %v", err)
        if errors.Is(err, gorm.ErrRecordNotFound) {
            return nil, sqls.ErrNotExists
        }
        return nil, err
    }
    log.Debugf("{{.SmallResourceNameSingular}} retrieved")
    return m, nil
}
{{ end }}

{{ if .IsRESTPutAllowed }}
func ({{.SmallResourceNameSingular}}Dao *{{.CapsResourceNameSingular}}Dao) Update{{.CapsResourceNameSingular}}(id string, m *models.{{.CapsResourceNameSingular}}) (*models.{{.CapsResourceNameSingular}}, error) {
	if len(id) < 1 {
		return nil, errors.New("invalid {{.SmallResourceNameSingular}} ID")
	}
	if strings.EqualFold(id, m.ID.String()) {
		return nil, errors.New("id and payload don't match")
	}

    var {{.SmallResourceNameSingular}} *models.{{.CapsResourceNameSingular}}
    if err := {{.SmallResourceNameSingular}}Dao.db.Where("id = ?", id).First(&{{.SmallResourceNameSingular}}).Error; err != nil {
        log.Debugf("failed to find {{.SmallResourceNameSingular}} for update: %v", err)
        if errors.Is(err, gorm.ErrRecordNotFound) {
            return nil, sqls.ErrNotExists
        }
        return nil, err
    }

    if err := {{.SmallResourceNameSingular}}Dao.db.Save(&m).Error; err != nil{
        log.Debugf("failed to update {{.SmallResourceNameSingular}}: %v", err)
        return nil, err
    }
    log.Debugf("{{.SmallResourceNameSingular}} updated")
    return m, nil
}
{{ end }}

{{ if .IsRESTDeleteAllowed }}
func ({{.SmallResourceNameSingular}}Dao *{{.CapsResourceNameSingular}}Dao) Delete{{.CapsResourceNameSingular}}(id string) error {
    var m *models.{{.CapsResourceNameSingular}}
    if err := {{.SmallResourceNameSingular}}Dao.db.Where("id = ?", id).Delete(&m).Error; err != nil {
        log.Debugf("failed to delete {{.SmallResourceNameSingular}}: %v", err)
        return err
    }

    log.Debugf("{{.SmallResourceNameSingular}} deleted")
    return nil
}
{{ end }}