package daos

import (
	"database/sql"
	"errors"
    "{{.GitPlatformURL}}/{{.GitPlatformUserName}}/{{.GitRepositoryName}}/{{.NodeName}}/pkg/rest/server/daos/clients/sqls"
	"{{.GitPlatformURL}}/{{.GitPlatformUserName}}/{{.GitRepositoryName}}/{{.NodeName}}/pkg/rest/server/models"
    log "github.com/sirupsen/logrus"
)

type {{.CapsResourceNameSingular}}Dao struct {
	sqlClient *sqls.SQLiteClient
}

func migrate{{.CapsResourceNamePlural}}(r *sqls.SQLiteClient) error {
	query := `
	CREATE TABLE IF NOT EXISTS {{.SmallResourceNamePlural}}(
		Id INTEGER PRIMARY KEY AUTOINCREMENT,
        {{.CreateQueryColumns}}
        CONSTRAINT id_unique_key UNIQUE (Id)
	)
	`
	_, err1 := r.DB.Exec(query)
	return err1
}

func New{{.CapsResourceNameSingular}}Dao() (*{{.CapsResourceNameSingular}}Dao, error) {
	sqlClient, err := sqls.InitSqliteDB()
	if err != nil {
		return nil, err
	}
	err = migrate{{.CapsResourceNamePlural}}(sqlClient)
    if err != nil {
        return nil, err
    }
	return &{{.CapsResourceNameSingular}}Dao{
		sqlClient,
	}, nil
}

{{ if .IsRESTCreateAllowed }}
func ({{.SmallResourceNameSingular}}Dao *{{.CapsResourceNameSingular}}Dao) Create{{.CapsResourceNameSingular}}(m *models.{{.CapsResourceNameSingular}}) (*models.{{.CapsResourceNameSingular}}, error) {
	insertQuery := "INSERT INTO {{.SmallResourceNamePlural}}({{.InsertQueryColumns}})values({{.InsertQueryParams}})"
    res, err := {{.SmallResourceNameSingular}}Dao.sqlClient.DB.Exec(insertQuery, {{.InsertQueryExecColumns}})
    if err != nil {
        return nil, err
    }
    id, err := res.LastInsertId()
    if err != nil {
        return nil, err
    }
    m.Id = id

	log.Debugf("{{.SmallResourceNameSingular}} created")
    return m, nil
}
{{ end }}

{{ if .IsRESTListAllowed }}
func ({{.SmallResourceNameSingular}}Dao *{{.CapsResourceNameSingular}}Dao) List{{.CapsResourceNamePlural}}() ([]*models.{{.CapsResourceNameSingular}}, error) {
    selectQuery := "SELECT * FROM {{.SmallResourceNamePlural}}"
    rows, err := {{.SmallResourceNameSingular}}Dao.sqlClient.DB.Query(selectQuery)
    if err != nil {
        return nil, err
    }
    defer func(rows *sql.Rows) {
        _ = rows.Close()
    }(rows)
    var {{.SmallResourceNamePlural}} []*models.{{.CapsResourceNameSingular}}
    for rows.Next() {
        m := models.{{.CapsResourceNameSingular}} {
           {{range $k, $v := .Fields}}
               {{GetCompositeFields $k}}
           {{end}}
        }
        if err = rows.Scan(&m.Id, {{.GetQueryExecColumns}}); err != nil {
            return nil, err
        }
        {{.SmallResourceNamePlural}} = append({{.SmallResourceNamePlural}}, &m)
    }
    if {{.SmallResourceNamePlural}} == nil {
        {{.SmallResourceNamePlural}} = []*models.{{.CapsResourceNameSingular}}{}
    }

    log.Debugf("{{.SmallResourceNameSingular}} listed")
    return {{.SmallResourceNamePlural}}, nil
}
{{ end }}

{{ if .IsRESTGetAllowed }}
func ({{.SmallResourceNameSingular}}Dao *{{.CapsResourceNameSingular}}Dao) Get{{.CapsResourceNameSingular}}(id string) (*models.{{.CapsResourceNameSingular}}, error) {
    selectQuery := "SELECT * FROM {{.SmallResourceNamePlural}} WHERE Id = ?"
    row := {{.SmallResourceNameSingular}}Dao.sqlClient.DB.QueryRow(selectQuery, id)
    m := models.{{.CapsResourceNameSingular}} {
       {{range $k, $v := .Fields}}
           {{GetCompositeFields $k}}
       {{end}}
    }
    if err := row.Scan(&m.Id, {{.GetQueryExecColumns}}); err != nil {
        if errors.Is(err, sql.ErrNoRows) {
            return nil, sqls.ErrNotExists
        }
        return nil, err
    }

    log.Debugf("{{.SmallResourceNameSingular}} retrieved")
    return &m, nil
}
{{ end }}

{{ if .IsRESTPutAllowed }}
func ({{.SmallResourceNameSingular}}Dao *{{.CapsResourceNameSingular}}Dao) Update{{.CapsResourceNameSingular}}(id string, m *models.{{.CapsResourceNameSingular}}) (*models.{{.CapsResourceNameSingular}}, error) {
    if id == 0 {
        return nil, errors.New("invalid {{.SmallResourceNameSingular}} ID")
    }
    if id != m.Id {
        return nil, errors.New("id and payload don't match")
    }

    {{.SmallResourceNameSingular}}, err := {{.SmallResourceNameSingular}}Dao.Get{{.CapsResourceNameSingular}}(id)
    if err != nil {
        return nil, err
    }
    if {{.SmallResourceNameSingular}} == nil {
        return nil, sql.ErrNoRows
    }

    updateQuery := "UPDATE {{.SmallResourceNamePlural}} SET {{.UpdateQueryColumnsAndParams}} WHERE Id = ?"
    res, err := {{.SmallResourceNameSingular}}Dao.sqlClient.DB.Exec(updateQuery, {{.UpdateQueryExecColumns}}, id)
    if err != nil {
        return nil, err
    }
    rowsAffected, err := res.RowsAffected()
    if err != nil {
        return nil, err
    }
    if rowsAffected == 0 {
        return nil, sqls.ErrUpdateFailed
    }

    log.Debugf("{{.SmallResourceNameSingular}} updated")
    return m, nil
}
{{ end }}

{{ if .IsRESTDeleteAllowed }}
func ({{.SmallResourceNameSingular}}Dao *{{.CapsResourceNameSingular}}Dao) Delete{{.CapsResourceNameSingular}}(id string) error {
    deleteQuery := "DELETE FROM {{.SmallResourceNamePlural}} WHERE Id = ?"
    res, err := {{.SmallResourceNameSingular}}Dao.sqlClient.DB.Exec(deleteQuery, id)
    if err != nil {
        return err
    }
    rowsAffected, err := res.RowsAffected()
    if err != nil {
        return err
    }
    if rowsAffected == 0 {
        return sqls.ErrDeleteFailed
    }

    log.Debugf("{{.SmallResourceNameSingular}} deleted")
    return nil
}
{{ end }}
