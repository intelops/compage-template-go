package controllers

import (
	"context"
{{if .IsStringID}}
    "github.com/google/uuid"
{{end}}
{{if .IsIntID}}
    "strconv"
{{end}}
	pb "{{.GitPlatformURL}}/{{.GitPlatformUserName}}/{{.GitRepositoryName}}/{{.NodeName}}/gen/api/v1"
	"{{.GitPlatformURL}}/{{.GitPlatformUserName}}/{{.GitRepositoryName}}/{{.NodeName}}/pkg/grpc/server/services"
	"{{.GitPlatformURL}}/{{.GitPlatformUserName}}/{{.GitRepositoryName}}/{{.NodeName}}/pkg/grpc/server/models"
    "go.opentelemetry.io/otel/attribute"
    "go.opentelemetry.io/otel/trace"
    "os"
)

type {{.CapsResourceNameSingular}}Server struct {
	{{.SmallResourceNameSingular}}Service *services.{{.CapsResourceNameSingular}}Service
	pb.Unimplemented{{.CapsResourceNameSingular}}ServiceServer
}

func New{{.CapsResourceNameSingular}}Server() (*{{.CapsResourceNameSingular}}Server, error) {
	{{.SmallResourceNameSingular}}Service, err := services.New{{.CapsResourceNameSingular}}Service()
	if err != nil {
		return nil, err
	}
	return &{{.CapsResourceNameSingular}}Server{
		{{.SmallResourceNameSingular}}Service: {{.SmallResourceNameSingular}}Service,
	}, nil
}

func (*{{.CapsResourceNameSingular}}Server) Ping(_ context.Context, _ *pb.{{.CapsResourceNameSingular}}Request) (*pb.{{.CapsResourceNameSingular}}Response, error) {
	return &pb.{{.CapsResourceNameSingular}}Response{
		Message: "Server is healthy and working!",
	}, nil
}

{{ if .IsGRPCCreateAllowed }}
func ({{.SmallResourceNameSingular}}Server *{{.CapsResourceNameSingular}}Server) Create{{.CapsResourceNameSingular}}(_ context.Context, req *pb.Create{{.CapsResourceNameSingular}}Request) (*pb.Create{{.CapsResourceNameSingular}}Response, error) {
	{{.SmallResourceNameSingular}} := models.{{.CapsResourceNameSingular}}{
        {{range $k, $v := .Fields}}
            {{if eq $k "ID"}}
            {{else}}
                {{$k}}: req.{{$.CapsResourceNameSingular}}.Get{{$k}}(),
            {{end}}
        {{end}}
	}

	if _, err := {{.SmallResourceNameSingular}}Server.{{.SmallResourceNameSingular}}Service.Create{{.CapsResourceNameSingular}}(&{{.SmallResourceNameSingular}}); err != nil {
		return nil, err
	}

	return &pb.Create{{.CapsResourceNameSingular}}Response{
		Message: "{{.CapsResourceNameSingular}} Created Successfully!",
	}, nil
}
{{ end }}

{{ if .IsGRPCListAllowed }}
func ({{.SmallResourceNameSingular}}Server *{{.CapsResourceNameSingular}}Server) List{{.CapsResourceNamePlural}}(_ context.Context, _ *pb.List{{.CapsResourceNamePlural}}Request) (*pb.List{{.CapsResourceNamePlural}}Response, error) {
	{{.SmallResourceNamePlural}}, err := {{.SmallResourceNameSingular}}Server.{{.SmallResourceNameSingular}}Service.List{{.CapsResourceNamePlural}}()

	if err != nil {
		return nil, err
	}

	var {{.SmallResourceNameSingular}}List []*pb.{{.CapsResourceNameSingular}}
	for _, retrieved{{.CapsResourceNameSingular}} := range {{.SmallResourceNamePlural}} {
		{{.SmallResourceNameSingular}}Response := &pb.{{.CapsResourceNameSingular}}{
			Id: retrieved{{.CapsResourceNameSingular}}.Id,
            {{range $k, $v := .Fields}}
                {{if eq $k "ID"}}
                {{else}}
                    {{$k}}:  retrieved{{$.CapsResourceNameSingular}}.{{$k}},
                {{end}}
            {{end}}
		}
		{{.SmallResourceNameSingular}}List = append({{.SmallResourceNameSingular}}List, {{.SmallResourceNameSingular}}Response)
	}

	return &pb.List{{.CapsResourceNamePlural}}Response{
		{{.CapsResourceNameSingular}}: {{.SmallResourceNameSingular}}List,
	}, nil
}
{{ end }}

{{ if .IsGRPCGetAllowed }}
func ({{.SmallResourceNameSingular}}Server *{{.CapsResourceNameSingular}}Server) Get{{.CapsResourceNameSingular}}(ctx context.Context, req *pb.Get{{.CapsResourceNameSingular}}Request) (*pb.Get{{.CapsResourceNameSingular}}Response, error) {
    id := req.GetId()
	retrieved{{.CapsResourceNameSingular}}, err := {{.SmallResourceNameSingular}}Server.{{.SmallResourceNameSingular}}Service.Get{{.CapsResourceNameSingular}}(id)

	if err != nil {
		return nil, err
	}

	{{.SmallResourceNameSingular}}Response := &pb.{{.CapsResourceNameSingular}}{
		Id: id,
        {{range $k, $v := .Fields}}
            {{if eq $k "ID"}}
            {{else}}
                {{$k}}:  retrieved{{$.CapsResourceNameSingular}}.{{$k}},
            {{end}}
        {{end}}
	}

	serviceName := os.Getenv("SERVICE_NAME")
    collectorURL := os.Getenv("OTEL_EXPORTER_OTLP_ENDPOINT")
    if len(serviceName) > 0 && len(collectorURL) > 0 {
        // get the current span by the request context
        currentSpan := trace.SpanFromContext(ctx)
   {{if .IsStringID}}
        currentSpan.SetAttributes(attribute.String("{{.SmallResourceNameSingular}}.id", retrieved{{.CapsResourceNameSingular}}.ID.String())))
   {{end}}
   {{if .IsIntID}}
        currentSpan.SetAttributes(attribute.String("{{.SmallResourceNameSingular}}.id", strconv.FormatInt(retrieved{{.CapsResourceNameSingular}}.Id, 10)))
   {{end}}
    }

	return &pb.Get{{.CapsResourceNameSingular}}Response{
		{{.CapsResourceNameSingular}}: {{.SmallResourceNameSingular}}Response,
	}, nil
}
{{ end }}

{{ if .IsGRPCPutAllowed }}
func ({{.SmallResourceNameSingular}}Server *{{.CapsResourceNameSingular}}Server) Update{{.CapsResourceNameSingular}}(_ context.Context, req *pb.Update{{.CapsResourceNameSingular}}Request) (*pb.Update{{.CapsResourceNameSingular}}Response, error) {
{{if .IsStringID}}
	id, err := uuid.Parse(req.GetId())
	if err != nil {
		return nil, err
	}
{{end}}
{{if .IsIntID}}
	id := req.GetId()
{{end}}


	{{.SmallResourceNameSingular}}Request := models.{{.CapsResourceNameSingular}}{
		ID: id,
        {{range $k, $v := .Fields}}
            {{if eq $k "ID"}}
            {{else}}
                {{$k}}:  req.{{$.CapsResourceNameSingular}}.Get{{$k}}(),
            {{end}}
        {{end}}
	}

   {{if .IsStringID}}
	_, err := {{.SmallResourceNameSingular}}Server.{{.SmallResourceNameSingular}}Service.Update{{.CapsResourceNameSingular}}(id.String(), &{{.SmallResourceNameSingular}}Request)
   {{end}}
   {{if .IsIntID}}
	_, err := {{.SmallResourceNameSingular}}Server.{{.SmallResourceNameSingular}}Service.Update{{.CapsResourceNameSingular}}(id, &{{.SmallResourceNameSingular}}Request)
   {{end}}

	if err != nil {
		return nil, err
	}

	return &pb.Update{{.CapsResourceNameSingular}}Response{
		Message: "{{.CapsResourceNameSingular}} Updated Successfully!",
	}, nil
}
{{ end }}

{{ if .IsGRPCDeleteAllowed }}
func ({{.SmallResourceNameSingular}}Server *{{.CapsResourceNameSingular}}Server) Delete{{.CapsResourceNameSingular}}(_ context.Context, req *pb.Delete{{.CapsResourceNameSingular}}Request) (*pb.Delete{{.CapsResourceNameSingular}}Response, error) {
	id := req.GetId()
	err := {{.SmallResourceNameSingular}}Server.{{.SmallResourceNameSingular}}Service.Delete{{.CapsResourceNameSingular}}(id)

	if err != nil {
		return nil, err
	}

	return &pb.Delete{{.CapsResourceNameSingular}}Response{
		Message: "{{.CapsResourceNameSingular}} Deleted Successfully!",
	}, nil
}
{{ end }}